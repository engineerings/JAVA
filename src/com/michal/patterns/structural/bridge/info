# Bridge

# Concepts:
- Decouple Abstraction and implementation
- Use Encapsulation, Composition, Inheritance
- Changes in Abstraction won't affect client (client is not aware about changes on backend)
- Use this pattern when you know that the details won't be right

# Design
- Interfaces and abstract classes
- Composition over inheritance
- More than Composition
- Expect change from both sides

# UML
- Abstraction
- Implementor
- Refined Abstraction
- Concrete Implementor

